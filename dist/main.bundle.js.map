{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://webgpu/./src/site.css","webpack://webgpu/./node_modules/css-loader/dist/runtime/api.js","webpack://webgpu/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://webgpu/./node_modules/gl-matrix/esm/common.js","webpack://webgpu/./node_modules/gl-matrix/esm/mat2.js","webpack://webgpu/./node_modules/gl-matrix/esm/mat2d.js","webpack://webgpu/./node_modules/gl-matrix/esm/mat3.js","webpack://webgpu/./node_modules/gl-matrix/esm/mat4.js","webpack://webgpu/./node_modules/gl-matrix/esm/vec3.js","webpack://webgpu/./node_modules/gl-matrix/esm/vec4.js","webpack://webgpu/./node_modules/gl-matrix/esm/quat.js","webpack://webgpu/./node_modules/gl-matrix/esm/quat2.js","webpack://webgpu/./node_modules/gl-matrix/esm/vec2.js","webpack://webgpu/./src/site.css?7390","webpack://webgpu/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://webgpu/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://webgpu/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://webgpu/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://webgpu/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://webgpu/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://webgpu/./src/helper.ts","webpack://webgpu/./src/main.ts","webpack://webgpu/./src/vertex-data.ts","webpack://webgpu/./src/shader.wgsl","webpack://webgpu/webpack/bootstrap","webpack://webgpu/webpack/runtime/compat get default export","webpack://webgpu/webpack/runtime/define property getters","webpack://webgpu/webpack/runtime/hasOwnProperty shorthand","webpack://webgpu/webpack/runtime/make namespace object","webpack://webgpu/webpack/runtime/nonce","webpack://webgpu/webpack/startup"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".grid {\\n  display: grid;\\n  height: calc(100vh - 20px);\\n  grid-template-columns: repeat(8, 1fr);\\n  grid-template-rows: 100%;\\n}\\n.grid1 {\\n  display: grid;\\n  height: 35px;\\n  grid-template-columns: repeat(8, 1fr);\\n  grid-template-rows: 35px;\\n}\\n.item1 {\\n  grid-column: 1/3;\\n}\\n.item2 {\\n  grid-column: 3/9;\\n}\\n.item3 {\\n  grid-column: 1/4;\\n}\\n.item4 {\\n  grid-column: 4/8;\\n}\\n\\nselect,\\ninput[type=\\\"text\\\"] {\\n  width: 100%;\\n  height: 22px;\\n  box-sizing: border-box;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/site.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,aAAa;EACb,0BAA0B;EAC1B,qCAAqC;EACrC,wBAAwB;AAC1B;AACA;EACE,aAAa;EACb,YAAY;EACZ,qCAAqC;EACrC,wBAAwB;AAC1B;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;AACA;EACE,gBAAgB;AAClB;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,sBAAsB;AACxB\",\"sourcesContent\":[\".grid {\\n  display: grid;\\n  height: calc(100vh - 20px);\\n  grid-template-columns: repeat(8, 1fr);\\n  grid-template-rows: 100%;\\n}\\n.grid1 {\\n  display: grid;\\n  height: 35px;\\n  grid-template-columns: repeat(8, 1fr);\\n  grid-template-rows: 35px;\\n}\\n.item1 {\\n  grid-column: 1/3;\\n}\\n.item2 {\\n  grid-column: 3/9;\\n}\\n.item3 {\\n  grid-column: 1/4;\\n}\\n.item4 {\\n  grid-column: 4/8;\\n}\\n\\nselect,\\ninput[type=\\\"text\\\"] {\\n  width: 100%;\\n  height: 22px;\\n  box-sizing: border-box;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n\n      content += cssWithMappingToString(item);\n\n      if (needLayer) {\n        content += \"}\";\n      }\n\n      if (item[2]) {\n        content += \"}\";\n      }\n\n      if (item[4]) {\n        content += \"}\";\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n\n\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n  }\n\n  return [content].join(\"\\n\");\n};","/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the source matrix\n * @returns {mat2} out\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2\n *\n * @param {ReadonlyMat2} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2\n *\n * @param {ReadonlyMat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {ReadonlyMat2} L the lower triangular matrix\n * @param {ReadonlyMat2} D the diagonal matrix\n * @param {ReadonlyMat2} U the upper triangular matrix\n * @param {ReadonlyMat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @returns {mat2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2} a The first matrix.\n * @param {ReadonlyMat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {ReadonlyMat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {ReadonlyMat2} a the first operand\n * @param {ReadonlyMat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 2x3 Matrix\n * @module mat2d\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, b,\n *  c, d,\n *  tx, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, b, 0,\n *  c, d, 0,\n *  tx, ty, 1]\n * </pre>\n * The last column is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {ReadonlyMat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {mat2d} out\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {ReadonlyMat2d} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to translate\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat2d} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat2d} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\n * Returns a string representation of a mat2d\n *\n * @param {ReadonlyMat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @returns {mat2d} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {ReadonlyMat2d} a the first operand\n * @param {ReadonlyMat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat2d} a The first matrix.\n * @param {ReadonlyMat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q a normalized quaternion\n * @param {ReadonlyVec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Creates a dual quat from a translation\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyVec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\n * @param {ReadonlyQuat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {ReadonlyMat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} real part\n */\n\nexport var getReal = quat.copy;\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {ReadonlyQuat2} a Dual Quaternion\n * @return {quat} dual part\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\n\nexport var setReal = quat.copy;\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {quat2} out\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @returns {quat2} out\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat} q quaternion to rotate by\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n * @function\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {quat2} out\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = quat.dot;\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {ReadonlyQuat2} a the first operand\n * @param {ReadonlyQuat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\n * Calculates the length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\n\nexport var length = quat.length;\n/**\n * Alias for {@link quat2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {ReadonlyQuat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat2} a the first dual quaternion.\n * @param {ReadonlyQuat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat2} a the first dual quat.\n * @param {ReadonlyQuat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./site.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./site.css\";\n       export default content && content.locals ? content.locals : undefined;\n","\"use strict\";\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n\n  var needLayer = typeof obj.layer !== \"undefined\";\n\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += \"}\";\n  }\n\n  if (obj.media) {\n    css += \"}\";\n  }\n\n  if (obj.supports) {\n    css += \"}\";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;","import { vec3, mat4 } from \"gl-matrix\";\n\nexport const CheckWebGPU = () => {\n  let result = \"Great, your current browser supports WebGPU!\";\n  if (!navigator.gpu) {\n    result = `Your current browser does not support WebGPU! Make sure you are on a system \n                  with WebGPU enabled. Currently, WebGPU is supported in  \n                  <a href=\"https://www.google.com/chrome/canary/\">Chrome canary</a>\n                  with the flag \"enable-unsafe-webgpu\" enabled. See the \n                  <a href=\"https://github.com/gpuweb/gpuweb/wiki/Implementation-Status\"> \n                  Implementation Status</a> page for more details.   \n                  You can also use your regular Chrome to try a pre-release version of WebGPU via\n                  <a href=\"https://developer.chrome.com/origintrials/#/view_trial/118219490218475521\">Origin Trial</a>.                \n              `;\n  }\n\n  const canvas = document.getElementById(\"canvas-webgpu\") as HTMLCanvasElement;\n  if (canvas) {\n    const div = document.getElementsByClassName(\"item2\")[0] as HTMLDivElement;\n    canvas.width = div.offsetWidth;\n    canvas.height = div.offsetHeight;\n\n    function windowResize() {\n      canvas.width = div.offsetWidth;\n      canvas.height = div.offsetHeight;\n    }\n    window.addEventListener(\"resize\", windowResize);\n  }\n  return result;\n};\n\nexport const CreateGPUBuffer = (\n  device: GPUDevice,\n  data: Float32Array,\n  usageFlag: GPUBufferUsageFlags = GPUBufferUsage.VERTEX |\n    GPUBufferUsage.COPY_DST\n) => {\n  const buffer = device.createBuffer({\n    size: data.byteLength,\n    usage: usageFlag,\n    mappedAtCreation: true,\n  });\n  new Float32Array(buffer.getMappedRange()).set(data);\n  buffer.unmap();\n  return buffer;\n};\n\nexport const InitGPU = async () => {\n  const checkgpu = CheckWebGPU();\n  if (checkgpu.includes(\"Your current browser does not support WebGPU!\")) {\n    console.log(checkgpu);\n    throw \"Your current browser does not support WebGPU!\";\n  }\n  const canvas = document.getElementById(\"canvas-webgpu\") as HTMLCanvasElement;\n  const adapter = await navigator.gpu?.requestAdapter();\n  const device = (await adapter?.requestDevice()) as GPUDevice;\n  const context = canvas.getContext(\"webgpu\") as unknown as GPUCanvasContext;\n  const format = navigator.gpu.getPreferredCanvasFormat();\n\n  context.configure({\n    device: device,\n    format: format,\n    alphaMode: \"opaque\",\n  });\n  return { device, canvas, format, context };\n};\n\nexport const CreateTransforms = (\n  modelMat: mat4,\n  translation: vec3 = [0, 0, 0],\n  rotation: vec3 = [0, 0, 0],\n  scaling: vec3 = [1, 1, 1]\n) => {\n  const rotateXMat = mat4.create();\n  const rotateYMat = mat4.create();\n  const rotateZMat = mat4.create();\n  const translateMat = mat4.create();\n  const scaleMat = mat4.create();\n\n  //perform individual transformations\n  mat4.fromTranslation(translateMat, translation);\n  mat4.fromXRotation(rotateXMat, rotation[0]);\n  mat4.fromYRotation(rotateYMat, rotation[1]);\n  mat4.fromZRotation(rotateZMat, rotation[2]);\n  mat4.fromScaling(scaleMat, scaling);\n\n  //combine all transformation matrices together to form a final transform matrix: modelMat\n  mat4.multiply(modelMat, rotateXMat, scaleMat);\n  mat4.multiply(modelMat, rotateYMat, modelMat);\n  mat4.multiply(modelMat, rotateZMat, modelMat);\n  mat4.multiply(modelMat, translateMat, modelMat);\n};\n\nexport const CreateViewProjection = (\n  respectRatio = 1.0,\n  cameraPosition: vec3 = [2, 2, 4],\n  lookDirection: vec3 = [0, 0, 0],\n  upDirection: vec3 = [0, 1, 0]\n) => {\n  const viewMatrix = mat4.create();\n  const projectionMatrix = mat4.create();\n  const viewProjectionMatrix = mat4.create();\n  mat4.perspective(\n    projectionMatrix,\n    (2 * Math.PI) / 5,\n    respectRatio,\n    0.1,\n    100.0\n  );\n\n  mat4.lookAt(viewMatrix, cameraPosition, lookDirection, upDirection);\n  mat4.multiply(viewProjectionMatrix, projectionMatrix, viewMatrix);\n\n  const cameraOption = {\n    eye: cameraPosition,\n    center: lookDirection,\n    zoomMax: 100,\n    zoomSpeed: 2,\n  };\n\n  return {\n    viewMatrix,\n    projectionMatrix,\n    viewProjectionMatrix,\n    cameraOption,\n  };\n};\n\nexport const CreateGPUBufferUint = (\n  device: GPUDevice,\n  data: Uint32Array,\n  usageFlag: GPUBufferUsageFlags = GPUBufferUsage.INDEX |\n    GPUBufferUsage.COPY_DST\n) => {\n  const buffer = device.createBuffer({\n    size: data.byteLength,\n    usage: usageFlag,\n    mappedAtCreation: true,\n  });\n  new Uint32Array(buffer.getMappedRange()).set(data);\n  buffer.unmap();\n  return buffer;\n};\n","import {\n  InitGPU,\n  CreateGPUBuffer,\n  CreateTransforms,\n  CreateViewProjection,\n} from \"./helper\";\nimport shader from \"./shader.wgsl\";\nimport \"./site.css\";\nimport { CubeData } from \"./vertex-data\";\nimport { mat4 } from \"gl-matrix\";\n\nconst Create3DObject = async () => {\n  const gpu = await InitGPU();\n  const device = gpu.device;\n\n  // create vertex buffers\n  const cubeData = CubeData();\n  const numberOfVertices = cubeData.positions.length / 3;\n  const vertexBuffer = CreateGPUBuffer(device, cubeData.positions);\n  const colorBuffer = CreateGPUBuffer(device, cubeData.colors);\n\n  const pipeline = device.createRenderPipeline({\n    layout: \"auto\",\n    vertex: {\n      module: device.createShaderModule({\n        code: shader,\n      }),\n      entryPoint: \"vs_main\",\n      buffers: [\n        {\n          arrayStride: 12,\n          attributes: [\n            {\n              shaderLocation: 0,\n              format: \"float32x3\",\n              offset: 0,\n            },\n          ],\n        },\n        {\n          arrayStride: 12,\n          attributes: [\n            {\n              shaderLocation: 1,\n              format: \"float32x3\",\n              offset: 0,\n            },\n          ],\n        },\n      ],\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: shader,\n      }),\n      entryPoint: \"fs_main\",\n      targets: [\n        {\n          format: gpu.format as GPUTextureFormat,\n        },\n      ],\n    },\n    primitive: {\n      topology: \"triangle-list\",\n      cullMode: \"back\",\n    },\n    depthStencil: {\n      format: \"depth24plus\",\n      depthWriteEnabled: true,\n      depthCompare: \"less\",\n    },\n  });\n\n  // create uniform data\n  const modelMatrix = mat4.create();\n  const mvpMatrix = mat4.create();\n  let vpMatrix = mat4.create();\n  const vp = CreateViewProjection(gpu.canvas.width / gpu.canvas.height);\n  vpMatrix = vp.viewProjectionMatrix;\n\n  // create uniform buffer and bind group\n  const uniformBuffer = device.createBuffer({\n    size: 64,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n  });\n\n  const uniformBindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: uniformBuffer,\n          offset: 0,\n          size: 64,\n        },\n      },\n    ],\n  });\n\n  const textureView = gpu.context.getCurrentTexture().createView();\n  const depthTexture = device.createTexture({\n    size: [gpu.canvas.width, gpu.canvas.height, 1],\n    format: \"depth24plus\",\n    usage: GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const renderPassDescription = {\n    colorAttachments: [\n      {\n        view: textureView,\n        clearValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0 }, //background color\n        //loadValue: { r: 0.2, g: 0.247, b: 0.314, a: 1.0  },\n        loadOp: \"clear\",\n        storeOp: \"store\",\n      },\n    ],\n    depthStencilAttachment: {\n      view: depthTexture.createView(),\n      depthLoadValue: 1.0,\n      depthClearValue: 1.0,\n      depthLoadOp: \"clear\",\n      depthStoreOp: \"store\",\n      /*stencilClearValue: 0,\n            stencilLoadValue: 0,\n            stencilLoadOp: 'clear',\n            stencilStoreOp: \"store\"*/\n    },\n  };\n\n  CreateTransforms(modelMatrix);\n  mat4.multiply(mvpMatrix, vpMatrix, modelMatrix);\n  device.queue.writeBuffer(uniformBuffer, 0, mvpMatrix as ArrayBuffer);\n\n  const commandEncoder = device.createCommandEncoder();\n  const renderPass = commandEncoder.beginRenderPass(\n    renderPassDescription as GPURenderPassDescriptor\n  );\n  renderPass.setPipeline(pipeline);\n  renderPass.setVertexBuffer(0, vertexBuffer);\n  renderPass.setVertexBuffer(1, colorBuffer);\n  renderPass.setBindGroup(0, uniformBindGroup);\n  renderPass.draw(numberOfVertices);\n  renderPass.end();\n\n  device.queue.submit([commandEncoder.finish()]);\n};\n\nCreate3DObject();\n\nwindow.addEventListener(\"resize\", function () {\n  Create3DObject();\n});\n","export const CubeData = () => {\n  const positions = new Float32Array([\n    // front\n    -1, -1, 1, 1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1,\n\n    // right\n    1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1,\n\n    // back\n    -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, -1, -1, -1,\n\n    // left\n    -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1,\n\n    // top\n    -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1,\n\n    // bottom\n    -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1,\n  ]);\n\n  const colors = new Float32Array([\n    // front - blue\n    0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,\n\n    // right - red\n    1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,\n\n    //back - yellow\n    1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,\n\n    //left - aqua\n    0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1,\n\n    // top - green\n    0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,\n\n    // bottom - fuchsia\n    1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1,\n  ]);\n\n  return {\n    positions,\n    colors,\n  };\n};\n","export default \"// vertex shader\\n\\nstruct Uniforms {\\n    mvpMatrix : mat4x4<f32>,\\n};\\n@binding(0) @group(0) var<uniform> uniforms : Uniforms;\\n\\nstruct Output {\\n    @builtin(position) Position : vec4<f32>,\\n    @location(0) vColor : vec4<f32>,\\n};\\n\\n@vertex\\nfn vs_main(@location(0) pos: vec4<f32>, @location(1) color: vec4<f32>) -> Output {\\n    var output: Output;\\n    output.Position = uniforms.mvpMatrix * pos;\\n    output.vColor = color;\\n    return output;\\n}\\n\\n// fragment shader\\n\\n @fragment\\nfn fs_main(@location(0) vColor: vec4<f32>) -> @location(0) vec4<f32> {\\n    return vColor;\\n}\"","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nc = undefined;","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(519);\n"],"names":["___CSS_LOADER_EXPORT___","push","module","id","exports","cssWithMappingToString","list","toString","this","map","item","content","needLayer","concat","length","join","i","modules","media","dedupe","supports","layer","undefined","alreadyImportedModules","k","_k","cssMapping","btoa","base64","unescape","encodeURIComponent","JSON","stringify","data","sourceMapping","sourceURLs","sources","source","sourceRoot","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","create","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","s","sin","c","cos","scale","v","v0","v1","fromRotation","fromScaling","str","frob","hypot","LDU","L","D","U","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","y","arguments","sqrt","mul","sub","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","translate","fromTranslation","fromMat4","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","a6","a7","a8","b6","b7","b8","m03","m13","m23","m30","m31","m32","m33","axis","t","len","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","scaling","is1","is2","is3","sm11","sm12","sm13","sm21","sm22","sm23","sm31","sm32","sm33","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspectiveNO","fovy","aspect","f","tan","Infinity","perspective","perspectiveZO","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","orthoNO","lr","bt","ortho","orthoZO","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","a9","a14","a15","b9","b13","b14","b15","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","r","zScale","transformMat4","m","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","angle","mag","cosine","acos","zero","vec","div","dist","sqrDist","sqrLen","forEach","stride","offset","count","fn","arg","l","dot","u","A","B","C","E","F","G","H","I","J","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","out_axis","getAngle","dotproduct","calculateW","exp","et","ln","atan2","log","pow","slerp","omega","cosom","sinom","scale0","scale1","u1","u2","u3","sqrt1MinusU1","sqrtU1","invDot","conjugate","fromMat3","fRoot","fTrace","j","fromEuler","halfToRad","cx","cy","cz","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","rotationTo","sqlerp","setAxes","view","dq","w1","fromRotationTranslationValues","outer","getReal","getDual","setReal","setDual","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","a_dot_b","transformMat2","transformMat2d","p0","p1","sinC","cosC","options","styleTagTransform","setAttributes","insert","domAPI","insertStyleElement","stylesInDOM","getIndexByIdentifier","identifier","result","modulesToDom","idCountMap","identifiers","base","indexByIdentifier","obj","css","sourceMap","references","updater","addElementStyle","byIndex","splice","api","update","newObj","remove","lastIdentifiers","newList","index","newLastIdentifiers","_i","_index","memo","style","styleTarget","document","querySelector","window","HTMLIFrameElement","contentDocument","head","e","getTarget","Error","appendChild","element","createElement","attributes","styleElement","nonce","setAttribute","apply","parentNode","removeChild","removeStyleElement","styleSheet","cssText","firstChild","createTextNode","CheckWebGPU","navigator","gpu","canvas","getElementById","getElementsByClassName","windowResize","offsetWidth","offsetHeight","addEventListener","CreateGPUBuffer","device","usageFlag","GPUBufferUsage","VERTEX","COPY_DST","buffer","createBuffer","size","byteLength","usage","mappedAtCreation","getMappedRange","unmap","InitGPU","checkgpu","includes","console","adapter","requestAdapter","requestDevice","context","getContext","format","getPreferredCanvasFormat","configure","alphaMode","CreateTransforms","modelMat","rotation","rotateXMat","mat4","rotateYMat","rotateZMat","translateMat","scaleMat","CreateViewProjection","respectRatio","cameraPosition","lookDirection","upDirection","viewMatrix","projectionMatrix","viewProjectionMatrix","cameraOption","zoomMax","zoomSpeed","CreateGPUBufferUint","INDEX","Uint32Array","Create3DObject","cubeData","CubeData","numberOfVertices","positions","vertexBuffer","colorBuffer","colors","pipeline","createRenderPipeline","layout","vertex","createShaderModule","code","entryPoint","buffers","arrayStride","shaderLocation","fragment","targets","primitive","topology","cullMode","depthStencil","depthWriteEnabled","depthCompare","modelMatrix","mvpMatrix","vpMatrix","uniformBuffer","UNIFORM","uniformBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","renderPassDescription","colorAttachments","getCurrentTexture","createView","clearValue","g","loadOp","storeOp","depthStencilAttachment","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","depthLoadValue","depthClearValue","depthLoadOp","depthStoreOp","queue","writeBuffer","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","setPipeline","setVertexBuffer","setBindGroup","draw","end","submit","finish","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","n","getter","__esModule","definition","key","Object","defineProperty","enumerable","get","prop","prototype","hasOwnProperty","Symbol","toStringTag","value","nc"],"sourceRoot":""}